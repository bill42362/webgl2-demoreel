// {{ camelCase filename }}.js
'use strict';
import 'isomorphic-fetch';

{{#if needToken }}
import getMeData from '../selector/getMeData.js';
{{/if}}
import {
  {{ constantCase actionType }},
  SET_NETWORKING_FETCHING,
  SET_NETWORKING_SUCCESS,
  SET_NETWORKING_ERROR,
} from '../ActionTypes.js';

const apiUrl = process.env.API_URL;

/**
 * {{ sentenceCase filename }}
 * @kind action
{{#if firstParam}}
 * @param {any} {{ addBigParantheses (camelCase firstParam) }} - action param.
{{/if}}
 * @return {Promise} Action promise.
 */
{{#if firstParam}}
  {{#if needToken}}
  const {{ camelCase filename }} = ({ {{ camelCase firstParam }} }) => async (dispatch, getState) => {
  {{else}}
  const {{ camelCase filename }} = ({ {{ camelCase firstParam }} }) => async dispatch => {
  {{/if}}
{{else}}
  {{#if needToken}}
  const {{ camelCase filename }} = () => async (dispatch, getState) => {
  {{else}}
  const {{ camelCase filename }} = () => async dispatch => {
  {{/if}}
{{/if}}

  const selectPath = _SELECTPATH_;
  {{#if needToken }}
  const token = getMeData(getState(), 'token');
  {{/if}}

  const fetchOptions = {
    method: _METHOD_,
    headers: {
      'Content-Type': 'application/json',
      {{#if needToken}}
      Authorization: `Bearer ${token}`,
      {{/if}}
    },
  };

  const url = new URL('{{endPoint}}', apiUrl);

  dispatch({ type: SET_NETWORKING_FETCHING, payload: { selectPath } });
  try {
    const response = await fetch(url.href, fetchOptions);

    if (!response.ok) {
      const { code } = await response.json();
      throw new Error(code);
    }

    dispatch({ type: {{ constantCase actionType }}, payload: _PAYLOAD_ });
    return dispatch({ type: SET_NETWORKING_SUCCESS, payload: { selectPath } });
  } catch (error) {
    return dispatch({
      type: SET_NETWORKING_ERROR,
      payload: { selectPath, error },
    });
  }
};

export default {{ camelCase filename }};
